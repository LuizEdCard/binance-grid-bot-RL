#!/usr/bin/env python3
"""
Script para fechar posi√ß√µes em preju√≠zo e liberar capital
"""

from src.utils.api_client import APIClient
import yaml

def main():
    print("=" * 60)
    print("üîÑ FECHANDO POSI√á√ïES EM PREJU√çZO PARA LIBERAR CAPITAL")
    print("=" * 60)
    
    # Carregar configura√ß√£o
    config_path = 'src/config/config.yaml'
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    try:
        # Inicializar cliente API
        client = APIClient(config, operation_mode='production')
        
        # Obter posi√ß√µes ativas
        positions = client.get_futures_positions()
        if not positions:
            print("‚ùå Erro ao obter posi√ß√µes")
            return
        
        active_positions = [p for p in positions if float(p.get('positionAmt', 0)) != 0]
        
        if not active_positions:
            print("‚úÖ Nenhuma posi√ß√£o ativa encontrada")
            return
        
        print(f"üìä Encontradas {len(active_positions)} posi√ß√µes ativas:")
        
        total_pnl = 0
        positions_to_close = []
        
        for pos in active_positions:
            symbol = pos['symbol']
            position_amt = float(pos['positionAmt'])
            entry_price = float(pos['entryPrice'])
            unrealized_pnl = float(pos['unRealizedProfit'])
            mark_price = float(pos.get('markPrice', 0))
            
            total_pnl += unrealized_pnl
            side = "LONG" if position_amt > 0 else "SHORT"
            status = "üî¥" if unrealized_pnl < 0 else "üü¢"
            
            print(f"  {status} {symbol} {side}: PnL ${unrealized_pnl:.4f}")
            
            # Adicionar posi√ß√µes em preju√≠zo > $0.01 para fechamento
            if unrealized_pnl < -0.01:
                positions_to_close.append(pos)
        
        print(f"\nüí∞ PnL Total: ${total_pnl:.4f}")
        print(f"üéØ Posi√ß√µes para fechar: {len(positions_to_close)}")
        
        if not positions_to_close:
            print("‚úÖ Nenhuma posi√ß√£o significativa em preju√≠zo para fechar")
            return
        
        # Fechar automaticamente posi√ß√µes com preju√≠zo > $0.01
        print(f"\nüöÄ Iniciando fechamento autom√°tico de posi√ß√µes em preju√≠zo...")
        print("   Objetivo: Liberar capital para novas opera√ß√µes")
        
        # Fechar posi√ß√µes
        closed_count = 0
        total_loss = 0
        
        for pos in positions_to_close:
            symbol = pos['symbol']
            position_amt = float(pos['positionAmt'])
            unrealized_pnl = float(pos['unRealizedProfit'])
            
            try:
                # Determinar lado da ordem para fechar
                if position_amt > 0:  # LONG -> SELL para fechar
                    side = "SELL"
                    quantity = abs(position_amt)
                else:  # SHORT -> BUY para fechar
                    side = "BUY"
                    quantity = abs(position_amt)
                
                print(f"\nüîÑ Fechando {symbol}: {side} {quantity:.1f}...")
                
                # Fechar com ordem MARKET
                result = client.place_futures_order(
                    symbol=symbol,
                    side=side,
                    order_type="MARKET",
                    quantity=str(quantity),
                    reduceOnly=True
                )
                
                if result and result.get("orderId"):
                    print(f"   ‚úÖ {symbol} fechado com sucesso!")
                    closed_count += 1
                    total_loss += unrealized_pnl
                else:
                    print(f"   ‚ùå Erro ao fechar {symbol}")
                    
            except Exception as e:
                print(f"   ‚ùå Erro ao fechar {symbol}: {e}")
        
        print(f"\n" + "=" * 60)
        print(f"üìä RESULTADO:")
        print(f"   Posi√ß√µes fechadas: {closed_count}/{len(positions_to_close)}")
        print(f"   Perda realizada: ${total_loss:.4f}")
        print(f"   Status: üîì Capital liberado para novas opera√ß√µes!")
        print("=" * 60)
        
        # Verificar saldo ap√≥s fechamento
        print(f"\nüí∞ Verificando saldo ap√≥s fechamento...")
        try:
            balance = client.get_futures_account_balance()
            if isinstance(balance, list):
                for asset in balance:
                    if asset.get("asset") == "USDT":
                        available = float(asset.get("availableBalance", 0))
                        total = float(asset.get("balance", 0))
                        print(f"   Saldo dispon√≠vel: ${available:.4f}")
                        print(f"   Saldo total: ${total:.4f}")
                        break
        except Exception as e:
            print(f"   Erro ao verificar saldo: {e}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    main()