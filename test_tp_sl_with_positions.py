#!/usr/bin/env python3
"""
Script para testar TP/SL com posi√ß√µes reais existentes
"""
import sys
import os

# Add src directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from utils.global_tp_sl_manager import GlobalTPSLManager, get_global_tpsl_manager
from utils.api_client import APIClient
from utils.logger import setup_logger
import yaml

log = setup_logger("test_tpsl_positions")

def load_config():
    """Load configuration from config.yaml"""
    config_path = os.path.join(os.path.dirname(__file__), 'src', 'config', 'config.yaml')
    with open(config_path, 'r') as f:
        return yaml.safe_load(f)

def test_tp_sl_with_real_positions():
    """Testa TP/SL com posi√ß√µes reais"""
    try:
        log.info("üß™ Testando TP/SL com posi√ß√µes reais...")
        
        config = load_config()
        api_client = APIClient(config)
        
        # Primeiro verificar posi√ß√µes existentes
        log.info("üìä Verificando posi√ß√µes existentes...")
        positions = api_client.get_futures_positions()
        
        active_positions = []
        for position in positions:
            position_amt = float(position.get("positionAmt", 0))
            if position_amt != 0:
                symbol = position.get("symbol", "")
                entry_price = position.get("entryPrice", "0")
                unrealized_pnl = position.get("unrealizedPnl", "0")
                
                active_positions.append({
                    "symbol": symbol,
                    "size": position_amt,
                    "entry": entry_price,
                    "pnl": unrealized_pnl
                })
                
                side = "LONG" if position_amt > 0 else "SHORT"
                log.info(f"üìà {symbol}: {side} {abs(position_amt):.6f} @ ${entry_price} | PnL: ${unrealized_pnl}")
        
        if not active_positions:
            log.warning("‚ö†Ô∏è Nenhuma posi√ß√£o ativa encontrada - teste limitado")
            return True
        
        log.info(f"üéØ Encontradas {len(active_positions)} posi√ß√µes ativas")
        
        # Criar e iniciar Global TP/SL Manager
        log.info("üöÄ Iniciando Global TP/SL Manager...")
        manager = get_global_tpsl_manager(api_client, config)
        
        if not manager:
            log.error("‚ùå Falha ao criar manager")
            return False
        
        # Iniciar monitoramento (deve detectar posi√ß√µes existentes)
        success = GlobalTPSLManager.start_monitoring()
        if not success:
            log.error("‚ùå Falha ao iniciar monitoramento")
            return False
        
        # Verificar se posi√ß√µes foram detectadas
        status = GlobalTPSLManager.get_status()
        log.info(f"üìä Status ap√≥s detec√ß√£o: {status}")
        
        if status['active_positions'] > 0:
            log.info(f"‚úÖ {status['active_positions']} posi√ß√µes detectadas e adicionadas ao TP/SL")
            
            for i, pos_id in enumerate(status['positions']):
                log.info(f"  {i+1}. Posi√ß√£o monitorada: {pos_id}")
        else:
            log.warning("‚ö†Ô∏è Nenhuma posi√ß√£o foi detectada pelo TP/SL")
            log.info("üí° Poss√≠veis motivos:")
            log.info("   - Posi√ß√µes n√£o atendem aos crit√©rios m√≠nimos")
            log.info("   - Erro na detec√ß√£o autom√°tica")
        
        # Aguardar alguns ciclos para ver logs de monitoramento
        log.info("‚è±Ô∏è Aguardando 15 segundos para verificar monitoramento...")
        import time
        time.sleep(15)
        
        # Verificar status final
        final_status = GlobalTPSLManager.get_status()
        log.info(f"üìä Status final: {final_status}")
        
        # Parar
        GlobalTPSLManager.stop_monitoring()
        log.info("üõë Monitoramento parado")
        
        return True
        
    except Exception as e:
        log.error(f"‚ùå Erro no teste: {e}")
        return False

if __name__ == "__main__":
    log.info("üî¨ Teste TP/SL com Posi√ß√µes Reais")
    log.info("=" * 50)
    
    success = test_tp_sl_with_real_positions()
    
    if success:
        log.info("\n‚úÖ TESTE CONCLU√çDO!")
        log.info("üí° Agora o TP/SL deve monitorar TODAS as posi√ß√µes com logs vis√≠veis")
    else:
        log.error("\n‚ùå TESTE FALHOU!")
    
    log.info("\n‚úÖ Finalizado!")