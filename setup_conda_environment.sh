#!/bin/bash

# Setup Conda Environment for Trading Bot
# Python 3.10 + All Dependencies with TA-Lib via conda

echo "üêç SETUP CONDA ENVIRONMENT - TRADING BOT"
echo "========================================"

# 1. VERIFICAR SE CONDA EST√Å DISPON√çVEL
if ! command -v conda &> /dev/null; then
    echo "‚ùå ERRO: Conda n√£o encontrado!"
    echo "   Instale o Anaconda ou Miniconda primeiro"
    exit 1
fi

echo "‚úÖ Conda encontrado: $(conda --version)"

# 2. CRIAR AMBIENTE COM PYTHON 3.10
echo ""
echo "üîß Criando ambiente 'trading-bot' com Python 3.10..."
conda create -n trading-bot python=3.10 -y

# 3. ATIVAR AMBIENTE
echo "üîÑ Ativando ambiente..."
source "$(conda info --base)/etc/profile.d/conda.sh"
conda activate trading-bot

# Verificar se ativou corretamente
if [[ "$CONDA_DEFAULT_ENV" != "trading-bot" ]]; then
    echo "‚ùå ERRO: Falha ao ativar ambiente 'trading-bot'"
    echo "   Execute manualmente: conda activate trading-bot"
    exit 1
fi

echo "‚úÖ Ambiente 'trading-bot' ativo"
echo "   Python: $(python --version)"
echo "   Localiza√ß√£o: $(which python)"

# 4. ATUALIZAR FERRAMENTAS BASE
echo ""
echo "üîß Atualizando ferramentas base..."
pip install --upgrade pip setuptools wheel

# 5. INSTALAR TA-LIB VIA CONDA (M√âTODO MAIS CONFI√ÅVEL)
echo ""
echo "üìà Instalando TA-Lib via conda (inclui biblioteca C)..."
conda install -c conda-forge ta-lib -y

# Testar TA-Lib imediatamente
echo "   üß™ Testando TA-Lib..."
if python -c "import talib; print('‚úÖ TA-Lib funcional')" 2>/dev/null; then
    echo "‚úÖ TA-Lib instalado com sucesso via conda"
else
    echo "‚ö†Ô∏è  TA-Lib via conda falhou. Tentando m√©todo pip..."
    # Fallback: instalar biblioteca C separadamente
    conda install -c conda-forge libta-lib -y
    pip install TA-Lib --no-cache-dir
    
    if python -c "import talib; print('‚úÖ TA-Lib funcional')" 2>/dev/null; then
        echo "‚úÖ TA-Lib instalado via m√©todo h√≠brido"
    else
        echo "‚ùå TA-Lib falhou. Ser√° necess√°rio instala√ß√£o manual."
    fi
fi

# 6. INSTALAR TENSORFLOW (COMPAT√çVEL COM PYTHON 3.10)
echo ""
echo "ü§ñ Instalando TensorFlow..."
pip install tensorflow==2.11.0 --no-cache-dir

# 7. INSTALAR DEPEND√äNCIAS CORE EM GRUPOS
echo ""
echo "üì¶ Instalando depend√™ncias core..."

echo "   ‚Üí Grupo 1: An√°lise Num√©rica"
pip install numpy==1.23.5 pandas scikit-learn

echo "   ‚Üí Grupo 2: Web Framework"
pip install flask==2.2.0 flask-cors pyyaml

echo "   ‚Üí Grupo 3: APIs de Trading"
pip install python-binance ccxt

echo "   ‚Üí Grupo 4: Machine Learning"
pip install gymnasium stable-baselines3

echo "   ‚Üí Grupo 5: An√°lise de Sentimento"
pip install transformers torch onnxruntime huggingface-hub

echo "   ‚Üí Grupo 6: Utilit√°rios"
pip install praw python-dotenv requests psutil

echo "   ‚Üí Grupo 7: Ass√≠ncrono e Networking"
pip install aiohttp asyncio-throttle

echo "   ‚Üí Grupo 8: Telegram (Opcional)"
pip install python-telegram-bot

# 8. INSTALAR DEPEND√äNCIAS OPCIONAIS
echo ""
echo "üìä Instalando depend√™ncias opcionais..."
pip install xgboost redis lz4 msgpack click rich tqdm matplotlib plotly

# 9. VERIFICA√á√ÉO COMPLETA
echo ""
echo "üîç VERIFICA√á√ÉO FINAL"
echo "==================="

# Fun√ß√£o para testar m√≥dulos
test_module() {
    local module=$1
    local description=$2
    if python -c "import $module" 2>/dev/null; then
        echo "‚úÖ $module - $description"
        return 0
    else
        echo "‚ùå $module - $description"
        return 1
    fi
}

# Testar m√≥dulos cr√≠ticos
echo "üìã M√≥dulos cr√≠ticos:"
modules_critical=(
    "talib:An√°lise T√©cnica"
    "tensorflow:Machine Learning"
    "pandas:An√°lise de Dados"
    "numpy:Computa√ß√£o Num√©rica"
    "binance:API Binance"
    "flask:Servidor Web"
    "sklearn:Scikit-learn"
    "gymnasium:RL Environment"
    "stable_baselines3:RL Algorithms"
)

success_count=0
total_count=${#modules_critical[@]}

for item in "${modules_critical[@]}"; do
    module="${item%:*}"
    description="${item#*:}"
    if test_module "$module" "$description"; then
        ((success_count++))
    fi
done

echo ""
echo "üìã M√≥dulos opcionais:"
modules_optional=(
    "torch:PyTorch"
    "transformers:Hugging Face"
    "onnxruntime:ONNX Runtime"
    "praw:Reddit API"
    "aiohttp:Async HTTP"
    "redis:Caching"
)

optional_success=0
optional_total=${#modules_optional[@]}

for item in "${modules_optional[@]}"; do
    module="${item%:*}"
    description="${item#*:}"
    if test_module "$module" "$description"; then
        ((optional_success++))
    fi
done

# 10. TESTES FUNCIONAIS
echo ""
echo "üß™ TESTES FUNCIONAIS"
echo "==================="

if [ $success_count -eq $total_count ]; then
    echo "Testando TA-Lib SMA..."
    python -c "
import talib
import numpy as np
data = np.random.random(50)
sma = talib.SMA(data, timeperiod=14)
print('‚úÖ TA-Lib SMA funcional')
" 2>/dev/null && echo "‚úÖ TA-Lib SMA OK" || echo "‚ùå TA-Lib SMA falhou"

    echo "Testando TensorFlow..."
    python -c "
import tensorflow as tf
print(f'‚úÖ TensorFlow {tf.__version__} funcional')
" 2>/dev/null || echo "‚ùå TensorFlow falhou"

    echo "Testando Binance Client..."
    python -c "
from binance.client import Client
print('‚úÖ Binance Client funcional')
" 2>/dev/null || echo "‚ùå Binance Client falhou"
fi

# 11. RELAT√ìRIO FINAL
echo ""
echo "üéØ RELAT√ìRIO FINAL"
echo "================="

echo "üìä Resultado dos Testes:"
echo "   M√≥dulos cr√≠ticos: $success_count/$total_count"
echo "   M√≥dulos opcionais: $optional_success/$optional_total"

if [ $success_count -eq $total_count ]; then
    echo ""
    echo "üéâ AMBIENTE CRIADO COM SUCESSO!"
    echo ""
    echo "‚úÖ Python 3.10 configurado"
    echo "‚úÖ TA-Lib instalado via conda"
    echo "‚úÖ Todas as depend√™ncias cr√≠ticas funcionando"
    echo ""
    echo "üöÄ COMO USAR:"
    echo "   1. Ativar ambiente:     conda activate trading-bot"
    echo "   2. Testar bot:          python tests/quick_test.py"
    echo "   3. Shadow + IA test:    python tests/test_shadow_and_ai_fallback.py"
    echo "   4. Iniciar sistema:     python src/multi_agent_bot.py"
    echo ""
    echo "üìù COMANDOS √öTEIS:"
    echo "   conda activate trading-bot    # Ativar ambiente"
    echo "   conda deactivate              # Desativar ambiente"
    echo "   pip list                      # Ver pacotes instalados"
    echo "   conda list                    # Ver pacotes conda"
    echo "   conda env list                # Ver todos os ambientes"
else
    echo ""
    echo "‚ö†Ô∏è  ALGUMAS DEPEND√äNCIAS FALHARAM"
    echo ""
    echo "‚ùå $((total_count - success_count)) m√≥dulos cr√≠ticos falharam"
    echo ""
    echo "üîß SOLU√á√ïES:"
    echo "   1. Execute novamente: ./setup_conda_environment.sh"
    echo "   2. Instale manualmente: conda activate trading-bot && pip install <modulo>"
    echo "   3. Para TA-Lib: conda install -c conda-forge ta-lib"
fi

echo ""
echo "üìã INFORMA√á√ïES DO AMBIENTE:"
echo "   Ambiente: $CONDA_DEFAULT_ENV"
echo "   Python: $(python --version)"
echo "   Pip: $(pip --version)"
echo "   Conda: $(conda --version)"
echo "   Localiza√ß√£o Python: $(which python)"
echo "   Localiza√ß√£o Conda: $(which conda)"

echo ""
echo "‚úÖ Setup completo! Ambiente 'trading-bot' pronto para uso."