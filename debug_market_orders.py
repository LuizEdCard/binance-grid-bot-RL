#!/usr/bin/env python3
"""
Debug avan√ßado para entender por que o sistema n√£o est√° usando ordens de mercado
"""
import sys
import os
import yaml
from decimal import Decimal

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def simulate_order_decision_logic():
    """Simula a l√≥gica de decis√£o de ordens exatamente como no GridLogic"""
    try:
        from utils.market_order_manager import MarketOrderManager
        from utils.api_client import APIClient
        
        print("üî¨ SIMULANDO L√ìGICA DE DECIS√ÉO DE ORDENS")
        print("=" * 60)
        
        # Carregar configura√ß√£o
        config_path = os.path.join(os.path.dirname(__file__), 'src', 'config', 'config.yaml')
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        
        # Simular inicializa√ß√£o do MarketOrderManager
        print("1. Simulando inicializa√ß√£o do MarketOrderManager...")
        
        # Criar client mock (sem conex√£o real)
        api_client = None  # Seria necess√°rio para teste real
        
        # Verificar configura√ß√£o
        market_order_config = config.get("market_orders", {})
        print(f"‚úÖ Market Orders Config: {market_order_config.get('enabled', False)}")
        
        if market_order_config.get("enabled", True):
            print("‚úÖ Market Order Manager seria inicializado")
            
            # Simular verifica√ß√£o das condi√ß√µes
            print("\n2. Simulando verifica√ß√£o de condi√ß√µes para uma ordem...")
            
            # Par√¢metros de teste
            test_symbol = "SOLUSDT"
            test_price = 147.65
            test_quantity = 0.1
            min_capital = market_order_config.get("min_capital_for_market_orders", 50.0)
            
            order_value = test_price * test_quantity
            print(f"üìä Ordem de teste: {test_quantity} {test_symbol.replace('USDT', '')} @ ${test_price}")
            print(f"üí∞ Valor da ordem: ${order_value:.2f}")
            print(f"üéØ Capital m√≠nimo: ${min_capital}")
            
            # Verificar condi√ß√£o de capital
            if order_value >= min_capital:
                print(f"‚úÖ Capital suficiente: ${order_value:.2f} >= ${min_capital}")
                
                # Simular determina√ß√£o de urg√™ncia
                print(f"\n3. Determinando urg√™ncia baseada em RSI...")
                test_rsi = 35  # Exemplo
                urgency_level = "normal"
                
                if test_rsi < 30 or test_rsi > 70:
                    urgency_level = "high"
                elif test_rsi < 35 or test_rsi > 65:
                    urgency_level = "normal"
                else:
                    urgency_level = "low"
                
                print(f"üìà RSI de teste: {test_rsi}")
                print(f"‚ö° Urg√™ncia determinada: {urgency_level}")
                
                # Simular m√©todo should_use_market_order
                print(f"\n4. Simulando should_use_market_order...")
                
                # Como n√£o temos hist√≥rico, assume que seria True
                avg_slippage = 0.0  # Sem hist√≥rico
                max_slippage = market_order_config.get("max_slippage_percentage", 0.15)
                
                slippage_thresholds = {
                    "low": max_slippage * 0.5,
                    "normal": max_slippage * 0.75,
                    "high": max_slippage,
                    "critical": max_slippage * 1.5
                }
                
                threshold = slippage_thresholds.get(urgency_level, max_slippage)
                should_use_market = avg_slippage <= threshold
                
                print(f"üìä Slippage m√©dio hist√≥rico: {avg_slippage:.3f}%")
                print(f"üéØ Threshold para urg√™ncia '{urgency_level}': {threshold:.3f}%")
                print(f"‚úÖ Should use market order: {should_use_market}")
                
                if should_use_market:
                    print(f"\nüéâ RESULTADO: Ordem seria executada como MERCADO")
                    print(f"üîÑ Processo: LIMITE ‚Üí MERCADO")
                else:
                    print(f"\n‚ö†Ô∏è RESULTADO: Ordem seria executada como LIMITE")
                    print(f"üìä Motivo: Slippage hist√≥rico muito alto")
                
            else:
                print(f"‚ùå Capital insuficiente: ${order_value:.2f} < ${min_capital}")
                print(f"üîÑ Resultado: Ordem seria executada como LIMITE")
        else:
            print("‚ùå Market Order Manager seria desabilitado")
            print("üîÑ Resultado: Todas as ordens seriam LIMITE")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_actual_logs_for_market_orders():
    """Verifica logs reais para entender o que est√° acontecendo"""
    print("\nüîç ANALISANDO LOGS REAIS")
    print("=" * 60)
    
    logs_dir = os.path.join(os.path.dirname(__file__), 'logs')
    
    # Procurar por logs que contenham informa√ß√µes sobre ordens
    import glob
    log_files = glob.glob(os.path.join(logs_dir, '*.log'))
    
    market_order_mentions = []
    limit_order_mentions = []
    
    for log_file in log_files[-5:]:  # √öltimos 5 arquivos
        try:
            with open(log_file, 'r') as f:
                lines = f.readlines()
                
            for i, line in enumerate(lines):
                if any(keyword in line.lower() for keyword in ['market order', 'mercado', 'slippage']):
                    market_order_mentions.append((log_file, i+1, line.strip()))
                elif any(keyword in line.lower() for keyword in ['colocando ordem', 'ordem', 'limit']):
                    limit_order_mentions.append((log_file, i+1, line.strip()))
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao ler {log_file}: {e}")
    
    print(f"üìä Men√ß√µes a Market Orders encontradas: {len(market_order_mentions)}")
    for log_file, line_num, content in market_order_mentions[-5:]:
        print(f"  üìÑ {os.path.basename(log_file)}:{line_num} - {content}")
    
    print(f"\nüìä Men√ß√µes a ordens (geral) encontradas: {len(limit_order_mentions)}")
    for log_file, line_num, content in limit_order_mentions[-10:]:
        if any(word in content.lower() for word in ['colocando', 'placing']):
            print(f"  üìÑ {os.path.basename(log_file)}:{line_num} - {content}")

def check_initialization_logs():
    """Verifica se o MarketOrderManager foi inicializado corretamente"""
    print("\nüîç VERIFICANDO LOGS DE INICIALIZA√á√ÉO")
    print("=" * 60)
    
    logs_dir = os.path.join(os.path.dirname(__file__), 'logs')
    
    # Procurar por logs de inicializa√ß√£o
    import glob
    log_files = glob.glob(os.path.join(logs_dir, '*.log'))
    
    initialization_logs = []
    
    for log_file in log_files[-5:]:
        try:
            with open(log_file, 'r') as f:
                lines = f.readlines()
                
            for i, line in enumerate(lines):
                if any(keyword in line for keyword in [
                    'Market Order Manager inicializado',
                    'MarketOrderManager inicializado',
                    'Market Order Manager desabilitado',
                    'GridLogic inicializado'
                ]):
                    initialization_logs.append((log_file, i+1, line.strip()))
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao ler {log_file}: {e}")
    
    print(f"üìä Logs de inicializa√ß√£o encontrados: {len(initialization_logs)}")
    for log_file, line_num, content in initialization_logs:
        print(f"  üìÑ {os.path.basename(log_file)}:{line_num}")
        print(f"     {content}")

def suggest_debugging_steps():
    """Sugere pr√≥ximos passos para debug"""
    print("\nüí° SUGEST√ïES PARA DEBUG")
    print("=" * 60)
    print("1. üîç Verificar se o sistema est√° realmente iniciando:")
    print("   python src/multi_agent_bot.py")
    print()
    print("2. üîç Adicionar logs de debug tempor√°rios no GridLogic:")
    print("   Adicionar log.info() na linha 638 do _place_order_unified")
    print()
    print("3. üîç Verificar se h√° ordens sendo colocadas:")
    print("   grep -r 'Colocando ordem' logs/")
    print()
    print("4. üîç Verificar se MarketOrderManager est√° ativo:")
    print("   grep -r 'Market Order Manager' logs/")
    print()
    print("5. üîç Verificar condi√ß√µes de ativa√ß√£o:")
    print("   - Capital por ordem >= $50")
    print("   - RSI em condi√ß√µes extremas")
    print("   - Slippage hist√≥rico baixo")

def main():
    """Fun√ß√£o principal de debug"""
    print("üî¨ DEBUG AVAN√áADO - SISTEMA DE ORDENS DE MERCADO")
    print("=" * 70)
    
    # Teste 1: Simular l√≥gica de decis√£o
    simulate_order_decision_logic()
    
    # Teste 2: Analisar logs reais
    check_actual_logs_for_market_orders()
    
    # Teste 3: Verificar inicializa√ß√£o
    check_initialization_logs()
    
    # Teste 4: Sugest√µes
    suggest_debugging_steps()
    
    print("\n" + "=" * 70)
    print("üìã RESUMO DO DEBUG:")
    print("‚úÖ Configura√ß√£o: Market Orders est√£o HABILITADOS")
    print("‚úÖ C√≥digo: L√≥gica de decis√£o est√° implementada")
    print("‚ùì Execu√ß√£o: Precisa verificar se condi√ß√µes est√£o sendo atendidas")
    print("\nüí° PR√ìXIMO PASSO: Executar o bot e monitorar logs em tempo real")

if __name__ == "__main__":
    main()

