#!/usr/bin/env python3
"""
Analisa funcionalidades implementadas que n√£o est√£o sendo utilizadas
"""

import os
import re
import sys
from pathlib import Path

def analyze_implemented_features():
    """Analisa funcionalidades que existem mas podem n√£o estar sendo usadas."""
    
    print("üîç AN√ÅLISE DE FUNCIONALIDADES IMPLEMENTADAS MAS N√ÉO UTILIZADAS")
    print("=" * 80)
    
    # Funcionalidades para verificar
    features_to_check = {
        "WebSocket Client": {
            "files": ["src/utils/websocket_client.py"],
            "usage_patterns": ["BinanceWebSocketClient", "websocket_client"],
            "description": "Cliente WebSocket para dados em tempo real"
        },
        "Intelligent Cache": {
            "files": ["src/utils/intelligent_cache.py"],
            "usage_patterns": ["IntelligentCache", "get_global_cache"],
            "description": "Sistema de cache inteligente para otimiza√ß√£o"
        },
        "Data Storage": {
            "files": ["src/utils/data_storage.py"],
            "usage_patterns": ["LocalDataStorage", "DataStorage"],
            "description": "Armazenamento local de dados para persist√™ncia"
        },
        "Hybrid Sentiment": {
            "files": ["src/utils/hybrid_sentiment_analyzer.py"],
            "usage_patterns": ["HybridSentimentAnalyzer"],
            "description": "Analisador h√≠brido de sentimento (Gemma + ONNX)"
        },
        "Async Client": {
            "files": ["src/utils/async_client.py"],
            "usage_patterns": ["AsyncAPIClient"],
            "description": "Cliente ass√≠ncrono para APIs"
        },
        "Fibonacci Calculator": {
            "files": ["src/utils/fibonacci_calculator.py"],
            "usage_patterns": ["FibonacciCalculator", "fibonacci"],
            "description": "Calculadora de n√≠veis de Fibonacci"
        },
        "Candlestick Patterns": {
            "files": ["src/core/candlestick_patterns.py"],
            "usage_patterns": ["CandlestickPatterns", "candlestick"],
            "description": "Detec√ß√£o de padr√µes de candlestick"
        },
        "Altcoin Correlation": {
            "files": ["src/core/altcoin_correlation.py"],
            "usage_patterns": ["AltcoinCorrelation", "correlation"],
            "description": "An√°lise de correla√ß√£o entre altcoins"
        },
        "Model API Routes": {
            "files": ["src/routes/model_api.py"],
            "usage_patterns": ["model_api", "flask", "app.route"],
            "description": "APIs para modelos de ML"
        },
        "Tabular Model": {
            "files": ["src/models/tabular_model.py"],
            "usage_patterns": ["TabularModel"],
            "description": "Modelo tabular para ML"
        }
    }
    
    # Buscar por arquivos Python no diret√≥rio src
    src_files = []
    for root, dirs, files in os.walk("src"):
        for file in files:
            if file.endswith(".py"):
                src_files.append(os.path.join(root, file))
    
    unused_features = []
    partially_used = []
    fully_used = []
    
    for feature_name, feature_info in features_to_check.items():
        print(f"\nüìã Verificando: {feature_name}")
        print(f"   Descri√ß√£o: {feature_info['description']}")
        
        # Verificar se o arquivo da funcionalidade existe
        feature_exists = False
        for feature_file in feature_info['files']:
            if os.path.exists(feature_file):
                feature_exists = True
                print(f"   ‚úÖ Arquivo encontrado: {feature_file}")
                break
        
        if not feature_exists:
            print(f"   ‚ùå Arquivos n√£o encontrados: {feature_info['files']}")
            continue
        
        # Verificar uso nos outros arquivos
        usage_count = 0
        usage_files = []
        
        for src_file in src_files:
            if src_file in feature_info['files']:
                continue  # Pular o pr√≥prio arquivo da funcionalidade
                
            try:
                with open(src_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                for pattern in feature_info['usage_patterns']:
                    if pattern in content:
                        usage_count += 1
                        if src_file not in usage_files:
                            usage_files.append(src_file)
                        break
            except Exception as e:
                continue
        
        print(f"   üìä Uso encontrado em {len(usage_files)} arquivos")
        
        if len(usage_files) == 0:
            print(f"   üö® FUNCIONALIDADE N√ÉO UTILIZADA!")
            unused_features.append(feature_name)
        elif len(usage_files) < 3:
            print(f"   ‚ö†Ô∏è  Uso limitado")
            partially_used.append((feature_name, usage_files))
        else:
            print(f"   ‚úÖ Bem utilizada")
            fully_used.append(feature_name)
            
        # Mostrar arquivos que usam
        if usage_files:
            for file in usage_files[:3]:  # Mostrar apenas os 3 primeiros
                print(f"      - {file}")
            if len(usage_files) > 3:
                print(f"      ... e mais {len(usage_files) - 3} arquivos")
    
    # Resumo final
    print("\n" + "=" * 80)
    print("üìà RESUMO DA AN√ÅLISE")
    print("=" * 80)
    
    print(f"\nüî¥ FUNCIONALIDADES N√ÉO UTILIZADAS ({len(unused_features)}):")
    for feature in unused_features:
        info = features_to_check[feature]
        print(f"   ‚Ä¢ {feature}: {info['description']}")
    
    print(f"\nüü° FUNCIONALIDADES PARCIALMENTE UTILIZADAS ({len(partially_used)}):")
    for feature, files in partially_used:
        info = features_to_check[feature]
        print(f"   ‚Ä¢ {feature}: {info['description']}")
        print(f"     Usada em: {len(files)} arquivo(s)")
    
    print(f"\nüü¢ FUNCIONALIDADES BEM UTILIZADAS ({len(fully_used)}):")
    for feature in fully_used:
        info = features_to_check[feature]
        print(f"   ‚Ä¢ {feature}: {info['description']}")
    
    # Verifica√ß√µes espec√≠ficas para problemas conhecidos
    print("\n" + "=" * 80)
    print("üîß VERIFICA√á√ïES ESPEC√çFICAS")
    print("=" * 80)
    
    # Verificar se WebSocket est√° sendo usado no multi_agent_bot
    print("\nüì° WebSocket Implementation:")
    try:
        with open("src/multi_agent_bot.py", 'r') as f:
            content = f.read()
            if "BinanceWebSocketClient" in content:
                print("   ‚úÖ WebSocket importado no multi_agent_bot")
                if "ws_client.start()" in content:
                    print("   ‚úÖ WebSocket sendo iniciado")
                else:
                    print("   ‚ö†Ô∏è  WebSocket importado mas n√£o iniciado")
            else:
                print("   ‚ùå WebSocket N√ÉO importado no multi_agent_bot")
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar: {e}")
    
    # Verificar configura√ß√£o de spacing
    print("\nüìè Grid Spacing Configuration:")
    try:
        with open("src/config/config.yaml", 'r') as f:
            content = f.read()
            if "initial_spacing_perc:" in content:
                match = re.search(r"initial_spacing_perc:\s*['\"]?([\d.]+)", content)
                if match:
                    spacing = float(match.group(1))
                    print(f"   üìä Spacing atual: {spacing*100:.1f}%")
                    if spacing <= 0.001:
                        print("   ‚úÖ Configurado para micro-lucros (‚â§0.1%)")
                    elif spacing <= 0.005:
                        print("   ‚ö†Ô∏è  Spacing moderado (0.1-0.5%)")
                    else:
                        print("   üö® Spacing muito largo (>0.5%) - pode perder oportunidades")
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar: {e}")
    
    # Verificar uso de _get_real_time_price
    print("\n‚ö° Real-time Price Usage:")
    real_time_usage = 0
    for src_file in src_files:
        try:
            with open(src_file, 'r') as f:
                content = f.read()
                if "_get_real_time_price" in content:
                    real_time_usage += 1
        except:
            continue
    
    if real_time_usage > 1:
        print(f"   ‚úÖ M√©todo _get_real_time_price usado em {real_time_usage} arquivos")
    else:
        print("   ‚ö†Ô∏è  M√©todo _get_real_time_price n√£o utilizado - usando polling")

if __name__ == "__main__":
    analyze_implemented_features()